clc;
format long g;
%Set constant
R = 6371000.0;

%Read visible satellitre ECEF coordinates for station 1
fin = fopen('visible_sat.txt');
c = textscan(fin, '%f%f%f%d');
fclose(fin);
[X, Y, Z, T] = c{1, 1:4};

%Use tokyo for observr station1
Tp = (35 + 41.0 / 60 + 22.4 / 3600) * (pi / 180);
Tl = (139 + 41.0 / 60 + 30.2 / 3600) * (pi / 180);
Th = 0.0;

%Get new observations with error
[Xs1, Ys1, Zs1, S1, Sr1] = getNewObs(X, Y, Z, Tp, Tl, Th, 'sat_err.txt', 'rng_err.txt', R);

%Get ECEF coordinates of station1
[x1, y1, z1, Sig1, PDOP1, VDOP1, HDOP1, trueError1, Qxx1] = getRecv(Xs1, Ys1, Zs1, S1, Sr1, Tp, Tl, Th, R);
%disp([x1, y1, z1, Sig1, PDOP1, VDOP1, HDOP1, Sig1 * PDOP1, Sig1 * VDOP1, Sig1 * HDOP1, trueError1]);
%--------------------------------------------%
%Read visible satellitre ECEF coordinates for station 1
fin = fopen('visible_sat2.txt');
c = textscan(fin, '%f%f%f%d');
fclose(fin);
[X, Y, Z, T] = c{1, 1:4};

%Use tokyo for observr station1
Op = (34 + 41.0 / 60 + 37.5 / 3600) * (pi / 180);
Ol = (135 + 30.0 / 60 + 7.6 / 3600) * (pi / 180);
Oh = 0.0;

%Get new observations with error
[Xs2, Ys2, Zs2, S2, Sr2] = getNewObs(X, Y, Z, Op, Ol, Oh, 'sat_err2.txt', 'rng_err2.txt', R);

%Get ECEF coordinates of station2
[x2, y2, z2, Sig2, PDOP2, VDOP2, HDOP2, trueError2, Qxx2] = getRecv(Xs2, Ys2, Zs2, S2, Sr2, Op, Ol, Oh, R);
%disp([x2, y2, z2, Sig2, PDOP2, VDOP2, HDOP2, Sig2 * PDOP2, Sig2 * VDOP2, Sig2 * HDOP2, trueError2]);


%Read visible satellitre ECEF coordinates for station 1 and station2
fin = fopen('Intersection.txt');
c = textscan(fin, '%f%f%f%d');
fclose(fin);
[X, Y, Z, T] = c{1, 1:4};

%Read 1m random error for satellite
fin = fopen('Isat_err.txt');
c = textscan(fin, '%f%f%f');
fclose(fin);
[Xer, Yer, Zer] = c{1, 1:3};

%Read range random error for station1
fin = fopen('Irng_err.txt');
c = textscan(fin, '%f');
fclose(fin);
dS1 = c{1, 1};

%Read range random error for station2
fin = fopen('Irng_err2.txt');
c = textscan(fin, '%f');
fclose(fin);
dS2 = c{1, 1};

%Xer = Xer*100% - Xer;
%Yer = Yer*100% - Yer;
%Zer = Zer*100% - Zer;
%dS1 = dS1*50% - dS1;
%dS2 = dS2*50% - dS2;

index = [];
for i = 0:length(T) - 1
    if mod(i, 9) == 0
        tmp = [];
        for j = 0:8
            tmp = [tmp, (i + j)];
        end
        index = [index; tmp];
    end
end
index = transpose(index) + 1;

x1 = (R + Th) * cos(Tp) * cos(Tl);
y1 = (R + Th) * cos(Tp) * sin(Tl);
z1 = (R + Th) * sin(Tp);
x2 = (R + Oh) * cos(Op) * cos(Ol);
y2 = (R + Oh) * cos(Op) * sin(Ol);
z2 = (R + Oh) * sin(Op);
trueBaseline = sqrt((x2 - x1)^2 + (y2 - y1)^2 + (z2 - z1)^2);
controlPoints = [];
for i = 1:length(index)
    tmp = [];
    for j = 1:length(index(i, :))
        tmp = [tmp; [X(index(i, j)), Y(index(i, j)), Z(index(i, j)), Xer(index(i, j)), Yer(index(i, j)), Zer(index(i, j)), dS1(index(i, j)), dS2(index(i, j))]];
    end
    [Xs1, Ys1, Zs1, S1, Sr1] = getNewObs2(Tp, Tl, Th, tmp(:, 1), tmp(:, 2), tmp(:, 3), R, tmp(:, 4), tmp(:, 5), tmp(:, 6), tmp(:, 7));
    [x1, y1, z1, Sig1, PDOP1, VDOP1, HDOP1, trueError1, Qxx1] = getRecv(Xs1, Ys1, Zs1, S1, Sr1, Tp, Tl, Th, R);
    [Xs2, Ys2, Zs2, S2, Sr2] = getNewObs2(Op, Ol, Oh, tmp(:, 1), tmp(:, 2), tmp(:, 3), R, tmp(:, 4), tmp(:, 5), tmp(:, 6), tmp(:, 8));
    [x2, y2, z2, Sig2, PDOP2, VDOP2, HDOP2, trueError2, Qxx2] = getRecv(Xs2, Ys2, Zs2, S2, Sr2, Op, Ol, Oh, R);
    disp([x1, y1, z1, Sig1, PDOP1, VDOP1, HDOP1, Sig1 * PDOP1, Sig1 * VDOP1, Sig1 * HDOP1, trueError1]);
    disp([x2, y2, z2, Sig2, PDOP2, VDOP2, HDOP2, Sig2 * PDOP2, Sig2 * VDOP2, Sig2 * HDOP2, trueError2]);
    controlPoints = [controlPoints; [x1, y1, z1, x2, y2, z2]];
end
X1 = controlPoints(:, 1);
Y1 = controlPoints(:, 2);
Z1 = controlPoints(:, 3);
X2 = controlPoints(:, 4);
Y2 = controlPoints(:, 5);
Z2 = controlPoints(:, 6);

Baselines = ((X2 - X1).^2 + (Y2 - Y1).^2 + (Z2 - Z1).^2).^0.5;









